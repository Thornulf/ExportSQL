/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.boundaries;

import fr.dao.Globales;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import javax.swing.DefaultListModel;

/**
 *
 * @author Administrateur
 */
public class ExportJIF extends javax.swing.JInternalFrame {

    private final Connection cn;
    private DatabaseMetaData ldbmd;

    /**
     * Creates new form ExportJIF
     */
    public ExportJIF() {
        initComponents();

        jLabelMessage.setText("");

        cn = Globales.getConnection();

        fillListDateBase();

        setTitle("Export");
        setVisible(true);
    }

    /**
     * ****************************************************************************
     * Procédure pour remplir la combo box DataBase avec toutes les bases de
     * données présentes sur le serveur
     * ****************************************************************************
     */
    private void fillListDateBase() {

        ResultSet lrs;

        try {
            ldbmd = cn.getMetaData();
            lrs = ldbmd.getCatalogs();
            DefaultListModel idlm = new DefaultListModel();
            while (lrs.next()) {
                if (!lrs.getString(1).equals("information_schema") && !lrs.getString(1).equals("mysql") && !lrs.getString(1).equals("performance_schema") && !lrs.getString(1).equals("phpmyadmin") && !lrs.getString(1).equals("test")) {
                    idlm.addElement(lrs.getString(1));
                }
            }
            jListBase.setModel(idlm);
            lrs.close();
        } catch (SQLException ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    }

    /**
     * *********************************************************************
     * Procédure pour remplir la combo box Table avec toutes les tables de la
     * base de données selectionnée dans la combo box DataBase
     * *********************************************************************
     */
    private void fillListTable() {

        ResultSet lrs;

        String tTypes[] = null;
        String dataBase = jListBase.getSelectedValue();

        DefaultListModel idlm = new DefaultListModel();

        try {
            ldbmd = cn.getMetaData();
            lrs = ldbmd.getTables(dataBase, "", "", tTypes);
            while (lrs.next()) {
                idlm.addElement(lrs.getString(3));
            }
            jListTable.setModel(idlm);
            lrs.close();
        } catch (SQLException e) {
            jLabelMessage.setText(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jRadioButtonCSV = new javax.swing.JRadioButton();
        jRadioButtonXML = new javax.swing.JRadioButton();
        jRadioButtonJSON = new javax.swing.JRadioButton();
        jButtonExport = new javax.swing.JButton();
        jLabelMessage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListBase = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListTable = new javax.swing.JList<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setText("Quelle Tables ?");

        buttonGroup1.add(jRadioButtonCSV);
        jRadioButtonCSV.setText("CSV");

        buttonGroup1.add(jRadioButtonXML);
        jRadioButtonXML.setText("XML");

        buttonGroup1.add(jRadioButtonJSON);
        jRadioButtonJSON.setText("JSON");

        jButtonExport.setText("Export");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        jLabelMessage.setText("Message");

        jLabel2.setText("Quelle Base de Données ?");

        jListBase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jListBaseMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jListBase);

        jScrollPane2.setViewportView(jListTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(52, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelMessage)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonExport)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButtonJSON)
                                .addGap(55, 55, 55)
                                .addComponent(jRadioButtonCSV)))
                        .addGap(169, 169, 169))))
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jRadioButtonXML)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonXML)
                    .addComponent(jRadioButtonJSON)
                    .addComponent(jRadioButtonCSV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jButtonExport)
                .addGap(8, 8, 8)
                .addComponent(jLabelMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * *******************************************************************
     * Procédure pour se déconnecter du serveur lorsqu'on ferme la fenetre
     *******************************************************************
     */

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
//        try {
//            if (cn != null) {
//                cn.close();
//            }
//        } catch (SQLException e) {
//            System.out.println(e.getMessage());
//        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        File ExportFolder;
        ResultSet lrs;

        try {
            Path pathDocuments = Paths.get(System.getProperty("user.home"), "Documents"); // définit le chemin pour accéder au dossier Documents du User
            System.out.println(pathDocuments.toString());

            /*
            Test pour savoir si le dossier "Export" existe dans le dossier "Documents"
             */
            ExportFolder = new File(pathDocuments.toString() + "/Export");
            System.out.println("folder : " + ExportFolder.toString());
            if (ExportFolder.exists() && ExportFolder.isDirectory()) { // test pour savoir si le fichier exist et si c'est un dossier
                System.out.println("Le dossier Export existe");
                System.out.println(ExportFolder.toString());
            } else { // création du dossier Export
                System.out.println("Le dossier Export n'existe pas");
                Path pathLogsFolder = Paths.get(System.getProperty("user.home"), "Documents/Export");
                Path pathCreationLogsFolder = Files.createDirectory(pathLogsFolder);
                ExportFolder = pathCreationLogsFolder.toFile();
                System.out.println(ExportFolder.toString());
            }

            String extension = "";

            /**
             * *****************************************************************************
             * définition de l'extension du fichier à créer en fonction du choix
             * sélectionné
             *****************************************************************************
             */
            if (jRadioButtonCSV.isSelected()) {
                extension = "csv";
            }
            if (jRadioButtonXML.isSelected()) {
                extension = "xml";
            }
            if (jRadioButtonJSON.isSelected()) {
                extension = "json";
            }

            File fileLogs = new File(pathDocuments.toString() + "/Export/" + jListTable.getSelectedValue() + "." + extension);
            System.out.println("file : " + fileLogs.toString());

            if (fileLogs.exists() && fileLogs.isFile()) {
                jLabelMessage.setText("Le fichier existe déjà dans : Documents ");
            } else {
                FileWriter fw = new FileWriter(ExportFolder.toString() + "/" + jListTable.getSelectedValue() + "." + extension, true);
                BufferedWriter bw = new BufferedWriter(fw);

                /**
                 * ********************************************************
                 ********** Création du Fichier CSV ***********************
                 ********************************************************
                 */
                if (jRadioButtonCSV.isSelected()) {

                    Statement stmt;
                    ResultSet rs;
                    ResultSetMetaData rsmd;
                    int nbColonnes = 0;

                    try {
                        lrs = ldbmd.getColumns(jListBase.getSelectedValue(), "", jListTable.getSelectedValue(), "");
                        while (lrs.next()) {
                            bw.write(lrs.getString(4) + ";");
                        }
                        bw.newLine();

                        stmt = cn.createStatement();
                        rs = stmt.executeQuery("SELECT* FROM " + jListBase.getSelectedValue() + "." + jListTable.getSelectedValue());
                        rsmd = rs.getMetaData();
                        nbColonnes = rsmd.getColumnCount();

                        while (rs.next()) {
                            for (int i = 1; i <= nbColonnes; i++) {
                                if (i == nbColonnes) {
                                    bw.write(rs.getString(i));
                                    bw.newLine();
                                } else {
                                    bw.write(rs.getString(i) + ";");
                                }
                            }
                        }

                        jLabelMessage.setText("Fichier enregistré sous  \n\r" + fileLogs.toString());

                        rs.close();
                        stmt.close();

                    } catch (SQLException ex) {
                        Logger.getLogger(ExportJIF.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                /**
                 * ********************************************************
                 ********************** Fichier XML ***********************
                 ********************************************************
                 */
                if (jRadioButtonXML.isSelected()) {

                    Statement stmt;
                    ResultSet rs;
                    ResultSetMetaData rsmd;
                    int nbColonnes = 0;

                    try {
                        lrs = ldbmd.getColumns(jListBase.getSelectedValue(), "", jListTable.getSelectedValue(), "");

                        stmt = cn.createStatement();
                        rs = stmt.executeQuery("SELECT * FROM " + jListBase.getSelectedValue() + "." + jListTable.getSelectedValue());
                        rsmd = rs.getMetaData();
                        nbColonnes = rsmd.getColumnCount();

                        List<String> nomColonne = new ArrayList();

                        while (lrs.next()) {
                            nomColonne.add(lrs.getString(4));
                        }

                        bw.write("<?xml version='1.0' encoding='UTF-8' ?>");
                        bw.newLine();
                        bw.write("<root>");
                        bw.newLine();

                        lrs = stmt.executeQuery("SELECT* FROM " + jListBase.getSelectedValue() + "." + jListTable.getSelectedValue());

                        while (lrs.next()) {
                            bw.write("<");
                            for (int i = 1; i <= nbColonnes; i++) {
                                if (i == nbColonnes) {
                                    bw.write(nomColonne.get(i - 1) + "='" + lrs.getString(i) + "' />");
                                    bw.newLine();
                                } else {
                                    bw.write(jListTable.getSelectedValue() + " " + nomColonne.get(i - 1) + "='" + lrs.getString(i) + "' ");
                                }
                            }
                        }

                        bw.write("<root>");

                        jLabelMessage.setText("Fichier enregistré sous \n\r" + fileLogs.toString());

                        rs.close();
                        lrs.close();

                    } catch (SQLException e) {
                        System.err.println(e.getMessage());
                    }

                }

                /**
                 * ********************************************************
                 ********************** Fichier JSON **********************
                 ********************************************************
                 */
                if (jRadioButtonJSON.isSelected()) {

                    Statement stmt;
                    ResultSet rs;
                    ResultSetMetaData rsmd;
                    int nbColonnes = 0;

                    try {
                        lrs = ldbmd.getColumns(jListBase.getSelectedValue(), "", jListTable.getSelectedValue(), "");

                        stmt = cn.createStatement();
                        rs = stmt.executeQuery("SELECT * FROM " + jListBase.getSelectedValue() + "." + jListTable.getSelectedValue());
                        rsmd = rs.getMetaData();
                        nbColonnes = rsmd.getColumnCount();

                        List<String> nomColonne = new ArrayList();

                        while (lrs.next()) {
                            nomColonne.add(lrs.getString(4));
                        }

                        lrs = stmt.executeQuery("SELECT * FROM " + jListBase.getSelectedValue() + "." + jListTable.getSelectedValue());

                        while (lrs.next()) {
                            bw.write("{");
                            for (int i = 1; i <= nbColonnes; i++) {
                                if (i == nbColonnes) {
                                    bw.write("\"" + nomColonne.get(i - 1) + "\" : \"" + lrs.getString(i) + "\" }");
                                    bw.newLine();
                                } else {
                                    bw.write("\"" + nomColonne.get(i - 1) + "\" : \"" + lrs.getString(i) + "\", ");
                                }
                            }
                        }

                        jLabelMessage.setText("Fichier enregistré sous  \n\r" + fileLogs.toString());

                        rs.close();
                        lrs.close();
                        stmt.close();

                    } catch (SQLException e) {
                        System.err.println(e.getMessage());
                    }

                }

                bw.close();
                fw.close();
            }

        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_jButtonExportActionPerformed

    private void jListBaseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListBaseMouseReleased
        // TODO add your handling code here:
        fillListTable();
    }//GEN-LAST:event_jListBaseMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonExport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JList<String> jListBase;
    private javax.swing.JList<String> jListTable;
    private javax.swing.JRadioButton jRadioButtonCSV;
    private javax.swing.JRadioButton jRadioButtonJSON;
    private javax.swing.JRadioButton jRadioButtonXML;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
